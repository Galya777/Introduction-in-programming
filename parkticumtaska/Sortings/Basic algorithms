#include <iostream>
using namespace std;
const int MAX =1000;
//removing negative elements from an array
int f(int arr[], size_t size) {
	int bsize = 0;
	for (size_t i = 0; i < size; ++i) {
		if (arr[i] > 0) {
			arr[bsize] = arr[i];
			++bsize;
		}
	}
	for (size_t i = 0; i < bsize; ++i) {
		return arr[i];
	}
}
//add new element by moving others
bool insert(int arr[], unsigned position, int x, unsigned n) {
	if (position > n) {
		return false;
	}else {
		for (unsigned i = n; i > position; --i) {
			arr[i] = arr[i - 1];
			arr[position] = x;
			return true;
		}
	}
}//add new element directly
bool insert(int arr[], unsigned position, int x, unsigned n) {
	if (position > n) {
		return false;
	}
	else {
		arr[n] = arr[position];
		arr[position] = x;
			return true;
		
	}
}
int removeElement(int arr[], size_t size) {
	for (int i = 0; i < size; ++i) {
		if (arr[i] < 0) {
			arr[i] = arr[size - 1];
			size--;
		}
	}
}// Binary search for a given element in a SORTED array
// Returns its index if the element exists or -1 otherwise
int binarySearch(int array[], int x, unsigned size)
{
    // left and right borders of the searching range
    unsigned left = 0, right = size;

    // while the range is not empty
    while (left < right) {
        // find the middle of the range
        unsigned middle = (left + right) / 2;

        if (array[middle] == x)     // If the element is found
            return middle;          // return its index

        if (array[middle] < x)      // If current element is less than X
            left = middle + 1;      // cut the left half
        else
            right = middle;         // else cut the right half
    }
    return -1;                      // If we reach that point the element is not into the array
}
int main()
{
	

	return 0;
}
